// Code generated by protoc-gen-go. DO NOT EDIT.
// source: indihub.proto

package indihub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Conn                 uint32   `protobuf:"varint,2,opt,name=conn,proto3" json:"conn,omitempty"`
	Closed               bool     `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cfc05744c754a5, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Request) GetConn() uint32 {
	if m != nil {
		return m.Conn
	}
	return 0
}

func (m *Request) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

type Response struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Conn                 uint32   `protobuf:"varint,2,opt,name=conn,proto3" json:"conn,omitempty"`
	SessionID            uint64   `protobuf:"varint,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SessionToken         string   `protobuf:"bytes,4,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cfc05744c754a5, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Response) GetConn() uint32 {
	if m != nil {
		return m.Conn
	}
	return 0
}

func (m *Response) GetSessionID() uint64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Response) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type INDIProfile struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Autostart            uint32   `protobuf:"varint,4,opt,name=autostart,proto3" json:"autostart,omitempty"`
	Autoconnect          uint32   `protobuf:"varint,5,opt,name=autoconnect,proto3" json:"autoconnect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *INDIProfile) Reset()         { *m = INDIProfile{} }
func (m *INDIProfile) String() string { return proto.CompactTextString(m) }
func (*INDIProfile) ProtoMessage()    {}
func (*INDIProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cfc05744c754a5, []int{2}
}

func (m *INDIProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_INDIProfile.Unmarshal(m, b)
}
func (m *INDIProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_INDIProfile.Marshal(b, m, deterministic)
}
func (m *INDIProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_INDIProfile.Merge(m, src)
}
func (m *INDIProfile) XXX_Size() int {
	return xxx_messageInfo_INDIProfile.Size(m)
}
func (m *INDIProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_INDIProfile.DiscardUnknown(m)
}

var xxx_messageInfo_INDIProfile proto.InternalMessageInfo

func (m *INDIProfile) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *INDIProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *INDIProfile) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *INDIProfile) GetAutostart() uint32 {
	if m != nil {
		return m.Autostart
	}
	return 0
}

func (m *INDIProfile) GetAutoconnect() uint32 {
	if m != nil {
		return m.Autoconnect
	}
	return 0
}

type INDIDriver struct {
	Binary               string   `protobuf:"bytes,1,opt,name=binary,proto3" json:"binary,omitempty"`
	Family               string   `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
	Label                string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Role                 string   `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	Custom               bool     `protobuf:"varint,6,opt,name=custom,proto3" json:"custom,omitempty"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *INDIDriver) Reset()         { *m = INDIDriver{} }
func (m *INDIDriver) String() string { return proto.CompactTextString(m) }
func (*INDIDriver) ProtoMessage()    {}
func (*INDIDriver) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cfc05744c754a5, []int{3}
}

func (m *INDIDriver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_INDIDriver.Unmarshal(m, b)
}
func (m *INDIDriver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_INDIDriver.Marshal(b, m, deterministic)
}
func (m *INDIDriver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_INDIDriver.Merge(m, src)
}
func (m *INDIDriver) XXX_Size() int {
	return xxx_messageInfo_INDIDriver.Size(m)
}
func (m *INDIDriver) XXX_DiscardUnknown() {
	xxx_messageInfo_INDIDriver.DiscardUnknown(m)
}

var xxx_messageInfo_INDIDriver proto.InternalMessageInfo

func (m *INDIDriver) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *INDIDriver) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *INDIDriver) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *INDIDriver) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *INDIDriver) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *INDIDriver) GetCustom() bool {
	if m != nil {
		return m.Custom
	}
	return false
}

func (m *INDIDriver) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type INDIHubHost struct {
	Token                string        `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Profile              *INDIProfile  `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Drivers              []*INDIDriver `protobuf:"bytes,3,rep,name=drivers,proto3" json:"drivers,omitempty"`
	SoloMode             bool          `protobuf:"varint,4,opt,name=soloMode,proto3" json:"soloMode,omitempty"`
	IsPHD2               bool          `protobuf:"varint,5,opt,name=isPHD2,proto3" json:"isPHD2,omitempty"`
	IsRobotic            bool          `protobuf:"varint,6,opt,name=isRobotic,proto3" json:"isRobotic,omitempty"`
	AgentVersion         string        `protobuf:"bytes,7,opt,name=agentVersion,proto3" json:"agentVersion,omitempty"`
	Os                   string        `protobuf:"bytes,8,opt,name=os,proto3" json:"os,omitempty"`
	Arch                 string        `protobuf:"bytes,9,opt,name=arch,proto3" json:"arch,omitempty"`
	IsBroadcast          bool          `protobuf:"varint,10,opt,name=isBroadcast,proto3" json:"isBroadcast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *INDIHubHost) Reset()         { *m = INDIHubHost{} }
func (m *INDIHubHost) String() string { return proto.CompactTextString(m) }
func (*INDIHubHost) ProtoMessage()    {}
func (*INDIHubHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cfc05744c754a5, []int{4}
}

func (m *INDIHubHost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_INDIHubHost.Unmarshal(m, b)
}
func (m *INDIHubHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_INDIHubHost.Marshal(b, m, deterministic)
}
func (m *INDIHubHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_INDIHubHost.Merge(m, src)
}
func (m *INDIHubHost) XXX_Size() int {
	return xxx_messageInfo_INDIHubHost.Size(m)
}
func (m *INDIHubHost) XXX_DiscardUnknown() {
	xxx_messageInfo_INDIHubHost.DiscardUnknown(m)
}

var xxx_messageInfo_INDIHubHost proto.InternalMessageInfo

func (m *INDIHubHost) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *INDIHubHost) GetProfile() *INDIProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *INDIHubHost) GetDrivers() []*INDIDriver {
	if m != nil {
		return m.Drivers
	}
	return nil
}

func (m *INDIHubHost) GetSoloMode() bool {
	if m != nil {
		return m.SoloMode
	}
	return false
}

func (m *INDIHubHost) GetIsPHD2() bool {
	if m != nil {
		return m.IsPHD2
	}
	return false
}

func (m *INDIHubHost) GetIsRobotic() bool {
	if m != nil {
		return m.IsRobotic
	}
	return false
}

func (m *INDIHubHost) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *INDIHubHost) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *INDIHubHost) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *INDIHubHost) GetIsBroadcast() bool {
	if m != nil {
		return m.IsBroadcast
	}
	return false
}

type RegisterInfo struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionID            uint64   `protobuf:"varint,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SessionIDPublic      string   `protobuf:"bytes,3,opt,name=sessionIDPublic,proto3" json:"sessionIDPublic,omitempty"`
	AgentVersion         string   `protobuf:"bytes,4,opt,name=agentVersion,proto3" json:"agentVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterInfo) Reset()         { *m = RegisterInfo{} }
func (m *RegisterInfo) String() string { return proto.CompactTextString(m) }
func (*RegisterInfo) ProtoMessage()    {}
func (*RegisterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cfc05744c754a5, []int{5}
}

func (m *RegisterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterInfo.Unmarshal(m, b)
}
func (m *RegisterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterInfo.Marshal(b, m, deterministic)
}
func (m *RegisterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterInfo.Merge(m, src)
}
func (m *RegisterInfo) XXX_Size() int {
	return xxx_messageInfo_RegisterInfo.Size(m)
}
func (m *RegisterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterInfo proto.InternalMessageInfo

func (m *RegisterInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RegisterInfo) GetSessionID() uint64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *RegisterInfo) GetSessionIDPublic() string {
	if m != nil {
		return m.SessionIDPublic
	}
	return ""
}

func (m *RegisterInfo) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

type SoloSummary struct {
	ImagesNum            uint64   `protobuf:"varint,1,opt,name=imagesNum,proto3" json:"imagesNum,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoloSummary) Reset()         { *m = SoloSummary{} }
func (m *SoloSummary) String() string { return proto.CompactTextString(m) }
func (*SoloSummary) ProtoMessage()    {}
func (*SoloSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_84cfc05744c754a5, []int{6}
}

func (m *SoloSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoloSummary.Unmarshal(m, b)
}
func (m *SoloSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoloSummary.Marshal(b, m, deterministic)
}
func (m *SoloSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoloSummary.Merge(m, src)
}
func (m *SoloSummary) XXX_Size() int {
	return xxx_messageInfo_SoloSummary.Size(m)
}
func (m *SoloSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_SoloSummary.DiscardUnknown(m)
}

var xxx_messageInfo_SoloSummary proto.InternalMessageInfo

func (m *SoloSummary) GetImagesNum() uint64 {
	if m != nil {
		return m.ImagesNum
	}
	return 0
}

func (m *SoloSummary) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*INDIProfile)(nil), "INDIProfile")
	proto.RegisterType((*INDIDriver)(nil), "INDIDriver")
	proto.RegisterType((*INDIHubHost)(nil), "INDIHubHost")
	proto.RegisterType((*RegisterInfo)(nil), "RegisterInfo")
	proto.RegisterType((*SoloSummary)(nil), "SoloSummary")
}

func init() { proto.RegisterFile("indihub.proto", fileDescriptor_84cfc05744c754a5) }

var fileDescriptor_84cfc05744c754a5 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x51, 0x6b, 0xdb, 0x3c,
	0x14, 0xad, 0xdd, 0xb4, 0xb1, 0xe5, 0xf8, 0xfb, 0x40, 0x1b, 0xc3, 0x94, 0x3d, 0x18, 0xc3, 0x36,
	0xbf, 0xcc, 0x94, 0xec, 0x07, 0x0c, 0x46, 0x1e, 0x9a, 0x87, 0x95, 0xa2, 0x8c, 0xbd, 0xcb, 0xb6,
	0xda, 0x8a, 0xd9, 0x56, 0x26, 0xc9, 0x85, 0xfe, 0x80, 0xbd, 0xef, 0x6d, 0x7f, 0x62, 0xec, 0x37,
	0x8e, 0x7b, 0xad, 0xc4, 0x4e, 0xcb, 0x20, 0x6f, 0xf7, 0x1c, 0x29, 0xb9, 0xe7, 0x9c, 0x7b, 0x65,
	0x12, 0xcb, 0xae, 0x96, 0xf7, 0x7d, 0x59, 0x6c, 0xb5, 0xb2, 0x2a, 0x5b, 0x93, 0x39, 0x13, 0xdf,
	0x7b, 0x61, 0x2c, 0xa5, 0x64, 0x56, 0x73, 0xcb, 0x13, 0x2f, 0xf5, 0xf2, 0x05, 0xc3, 0x1a, 0xb8,
	0x4a, 0x75, 0x5d, 0xe2, 0xa7, 0x5e, 0x1e, 0x33, 0xac, 0xe9, 0x2b, 0x72, 0x5e, 0x35, 0xca, 0x88,
	0x3a, 0x39, 0x4d, 0xbd, 0x3c, 0x60, 0x0e, 0x65, 0x96, 0x04, 0x4c, 0x98, 0xad, 0xea, 0x8c, 0x38,
	0xfa, 0xbf, 0x5e, 0x93, 0xd0, 0x08, 0x63, 0xa4, 0xea, 0xd6, 0x2b, 0xfc, 0xbb, 0x19, 0x1b, 0x09,
	0x9a, 0x91, 0x85, 0x03, 0x5f, 0xd4, 0x37, 0xd1, 0x25, 0xb3, 0xd4, 0xcb, 0x43, 0x76, 0xc0, 0x65,
	0x3f, 0x3c, 0x12, 0xad, 0xaf, 0x57, 0xeb, 0x1b, 0xad, 0x6e, 0x65, 0x23, 0xe8, 0x7f, 0xc4, 0x97,
	0x35, 0xf6, 0x8d, 0x99, 0x2f, 0x6b, 0xe8, 0xda, 0xf1, 0x56, 0x60, 0xd7, 0x90, 0x61, 0x0d, 0xdc,
	0x56, 0x69, 0x8b, 0x0d, 0x63, 0x86, 0x35, 0x28, 0xe1, 0xbd, 0x55, 0xc6, 0x72, 0x6d, 0xb1, 0x51,
	0xcc, 0x46, 0x82, 0xa6, 0x24, 0x02, 0x00, 0x9a, 0x45, 0x65, 0x93, 0x33, 0x3c, 0x9f, 0x52, 0xd9,
	0x6f, 0x8f, 0x10, 0xd0, 0xb1, 0xd2, 0xf2, 0x41, 0x68, 0x08, 0xa9, 0x94, 0x1d, 0xd7, 0x8f, 0x28,
	0x25, 0x64, 0x0e, 0x01, 0x7f, 0xcb, 0x5b, 0xd9, 0x3c, 0x3a, 0x41, 0x0e, 0xd1, 0x97, 0xe4, 0xac,
	0xe1, 0xa5, 0x68, 0x50, 0x53, 0xc8, 0x06, 0x40, 0x13, 0x32, 0x7f, 0x10, 0x1a, 0xcc, 0x3a, 0xef,
	0x3b, 0x08, 0x16, 0xb4, 0x6a, 0x04, 0x2a, 0x09, 0x19, 0xd6, 0x38, 0x98, 0xde, 0x58, 0xd5, 0x26,
	0xe7, 0x6e, 0x30, 0x88, 0xf6, 0x11, 0xcc, 0xc7, 0x08, 0xb2, 0x3f, 0xfe, 0x10, 0xdb, 0x55, 0x5f,
	0x5e, 0x29, 0x63, 0xa1, 0xbf, 0xc5, 0x8c, 0x07, 0xb9, 0x03, 0xa0, 0x6f, 0xc9, 0x7c, 0x3b, 0xe4,
	0x8a, 0x72, 0xa3, 0xe5, 0xa2, 0x98, 0x64, 0xcd, 0x76, 0x87, 0xf4, 0x0d, 0x99, 0xd7, 0xe8, 0xdb,
	0x24, 0xa7, 0xe9, 0x69, 0x1e, 0x2d, 0xa3, 0x62, 0xcc, 0x82, 0xed, 0xce, 0xe8, 0x05, 0x09, 0x8c,
	0x6a, 0xd4, 0x67, 0x55, 0x0b, 0xf4, 0x13, 0xb0, 0x3d, 0x06, 0xf1, 0xd2, 0xdc, 0x5c, 0xad, 0x96,
	0x68, 0x29, 0x60, 0x0e, 0xc1, 0x5c, 0xa4, 0x61, 0xaa, 0x54, 0x56, 0x56, 0xce, 0xd7, 0x48, 0xc0,
	0x86, 0xf0, 0x3b, 0xd1, 0xd9, 0xaf, 0x2e, 0xa5, 0xc1, 0xe2, 0x01, 0x07, 0x1b, 0xa1, 0x4c, 0x12,
	0xe0, 0x89, 0xaf, 0x0c, 0xc4, 0xc1, 0x75, 0x75, 0x9f, 0x84, 0x43, 0x1c, 0x50, 0xc3, 0x7c, 0xa5,
	0xf9, 0xa4, 0x15, 0xaf, 0x2b, 0x6e, 0x6c, 0x42, 0xb0, 0xcf, 0x94, 0xca, 0x7e, 0x7a, 0x64, 0xc1,
	0xc4, 0x9d, 0x34, 0x56, 0xe8, 0x75, 0x77, 0xab, 0xfe, 0x91, 0xd8, 0xc1, 0x42, 0xfb, 0x4f, 0x17,
	0x3a, 0x27, 0xff, 0xef, 0xc1, 0x4d, 0x5f, 0x36, 0xb2, 0x72, 0xf3, 0x7e, 0x4a, 0x3f, 0x33, 0x36,
	0x7b, 0x6e, 0x2c, 0xfb, 0x48, 0xa2, 0x8d, 0x6a, 0xd4, 0xa6, 0x6f, 0x5b, 0x58, 0x2d, 0x48, 0xaa,
	0xe5, 0x77, 0xc2, 0x5c, 0xf7, 0x2d, 0x8a, 0x9a, 0xb1, 0x91, 0xd8, 0xbf, 0x48, 0x7f, 0x7c, 0x91,
	0xcb, 0x5f, 0x3e, 0x99, 0xbb, 0x25, 0xa0, 0xef, 0x47, 0x7b, 0xb8, 0x10, 0xc3, 0xa4, 0xdd, 0x7a,
	0x5c, 0xc4, 0xc5, 0xd4, 0x7b, 0x76, 0x42, 0xdf, 0x0d, 0xdb, 0xbe, 0x11, 0x1a, 0xb6, 0x3d, 0x2c,
	0x76, 0x2f, 0xff, 0x22, 0x28, 0xdc, 0xf7, 0x24, 0x3b, 0xc9, 0xbd, 0x4b, 0x0f, 0x2e, 0xc2, 0x1c,
	0x8f, 0xb9, 0x18, 0x6c, 0x76, 0xcb, 0x30, 0xb9, 0xb6, 0x28, 0x26, 0x1e, 0xe1, 0x2a, 0xbd, 0x24,
	0x2f, 0xf6, 0x63, 0x39, 0x4e, 0xc3, 0xf4, 0x17, 0x47, 0x89, 0x29, 0xcf, 0xf1, 0xeb, 0xf8, 0xe1,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xfb, 0x67, 0x14, 0x2e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// INDIHubClient is the client API for INDIHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type INDIHubClient interface {
	RegisterHost(ctx context.Context, in *INDIHubHost, opts ...grpc.CallOption) (*RegisterInfo, error)
	INDIServer(ctx context.Context, opts ...grpc.CallOption) (INDIHub_INDIServerClient, error)
	PHD2Server(ctx context.Context, opts ...grpc.CallOption) (INDIHub_PHD2ServerClient, error)
	SoloMode(ctx context.Context, opts ...grpc.CallOption) (INDIHub_SoloModeClient, error)
	BroadcastINDIServer(ctx context.Context, opts ...grpc.CallOption) (INDIHub_BroadcastINDIServerClient, error)
	BroadcastPHD2Server(ctx context.Context, opts ...grpc.CallOption) (INDIHub_BroadcastPHD2ServerClient, error)
}

type iNDIHubClient struct {
	cc *grpc.ClientConn
}

func NewINDIHubClient(cc *grpc.ClientConn) INDIHubClient {
	return &iNDIHubClient{cc}
}

func (c *iNDIHubClient) RegisterHost(ctx context.Context, in *INDIHubHost, opts ...grpc.CallOption) (*RegisterInfo, error) {
	out := new(RegisterInfo)
	err := c.cc.Invoke(ctx, "/INDIHub/RegisterHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iNDIHubClient) INDIServer(ctx context.Context, opts ...grpc.CallOption) (INDIHub_INDIServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_INDIHub_serviceDesc.Streams[0], "/INDIHub/INDIServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &iNDIHubINDIServerClient{stream}
	return x, nil
}

type INDIHub_INDIServerClient interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ClientStream
}

type iNDIHubINDIServerClient struct {
	grpc.ClientStream
}

func (x *iNDIHubINDIServerClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNDIHubINDIServerClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iNDIHubClient) PHD2Server(ctx context.Context, opts ...grpc.CallOption) (INDIHub_PHD2ServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_INDIHub_serviceDesc.Streams[1], "/INDIHub/PHD2Server", opts...)
	if err != nil {
		return nil, err
	}
	x := &iNDIHubPHD2ServerClient{stream}
	return x, nil
}

type INDIHub_PHD2ServerClient interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ClientStream
}

type iNDIHubPHD2ServerClient struct {
	grpc.ClientStream
}

func (x *iNDIHubPHD2ServerClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNDIHubPHD2ServerClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iNDIHubClient) SoloMode(ctx context.Context, opts ...grpc.CallOption) (INDIHub_SoloModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_INDIHub_serviceDesc.Streams[2], "/INDIHub/SoloMode", opts...)
	if err != nil {
		return nil, err
	}
	x := &iNDIHubSoloModeClient{stream}
	return x, nil
}

type INDIHub_SoloModeClient interface {
	Send(*Response) error
	CloseAndRecv() (*SoloSummary, error)
	grpc.ClientStream
}

type iNDIHubSoloModeClient struct {
	grpc.ClientStream
}

func (x *iNDIHubSoloModeClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNDIHubSoloModeClient) CloseAndRecv() (*SoloSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SoloSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iNDIHubClient) BroadcastINDIServer(ctx context.Context, opts ...grpc.CallOption) (INDIHub_BroadcastINDIServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_INDIHub_serviceDesc.Streams[3], "/INDIHub/BroadcastINDIServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &iNDIHubBroadcastINDIServerClient{stream}
	return x, nil
}

type INDIHub_BroadcastINDIServerClient interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ClientStream
}

type iNDIHubBroadcastINDIServerClient struct {
	grpc.ClientStream
}

func (x *iNDIHubBroadcastINDIServerClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNDIHubBroadcastINDIServerClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iNDIHubClient) BroadcastPHD2Server(ctx context.Context, opts ...grpc.CallOption) (INDIHub_BroadcastPHD2ServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_INDIHub_serviceDesc.Streams[4], "/INDIHub/BroadcastPHD2Server", opts...)
	if err != nil {
		return nil, err
	}
	x := &iNDIHubBroadcastPHD2ServerClient{stream}
	return x, nil
}

type INDIHub_BroadcastPHD2ServerClient interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ClientStream
}

type iNDIHubBroadcastPHD2ServerClient struct {
	grpc.ClientStream
}

func (x *iNDIHubBroadcastPHD2ServerClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iNDIHubBroadcastPHD2ServerClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// INDIHubServer is the server API for INDIHub service.
type INDIHubServer interface {
	RegisterHost(context.Context, *INDIHubHost) (*RegisterInfo, error)
	INDIServer(INDIHub_INDIServerServer) error
	PHD2Server(INDIHub_PHD2ServerServer) error
	SoloMode(INDIHub_SoloModeServer) error
	BroadcastINDIServer(INDIHub_BroadcastINDIServerServer) error
	BroadcastPHD2Server(INDIHub_BroadcastPHD2ServerServer) error
}

// UnimplementedINDIHubServer can be embedded to have forward compatible implementations.
type UnimplementedINDIHubServer struct {
}

func (*UnimplementedINDIHubServer) RegisterHost(ctx context.Context, req *INDIHubHost) (*RegisterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHost not implemented")
}
func (*UnimplementedINDIHubServer) INDIServer(srv INDIHub_INDIServerServer) error {
	return status.Errorf(codes.Unimplemented, "method INDIServer not implemented")
}
func (*UnimplementedINDIHubServer) PHD2Server(srv INDIHub_PHD2ServerServer) error {
	return status.Errorf(codes.Unimplemented, "method PHD2Server not implemented")
}
func (*UnimplementedINDIHubServer) SoloMode(srv INDIHub_SoloModeServer) error {
	return status.Errorf(codes.Unimplemented, "method SoloMode not implemented")
}
func (*UnimplementedINDIHubServer) BroadcastINDIServer(srv INDIHub_BroadcastINDIServerServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastINDIServer not implemented")
}
func (*UnimplementedINDIHubServer) BroadcastPHD2Server(srv INDIHub_BroadcastPHD2ServerServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastPHD2Server not implemented")
}

func RegisterINDIHubServer(s *grpc.Server, srv INDIHubServer) {
	s.RegisterService(&_INDIHub_serviceDesc, srv)
}

func _INDIHub_RegisterHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(INDIHubHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(INDIHubServer).RegisterHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/INDIHub/RegisterHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(INDIHubServer).RegisterHost(ctx, req.(*INDIHubHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _INDIHub_INDIServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INDIHubServer).INDIServer(&iNDIHubINDIServerServer{stream})
}

type INDIHub_INDIServerServer interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type iNDIHubINDIServerServer struct {
	grpc.ServerStream
}

func (x *iNDIHubINDIServerServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNDIHubINDIServerServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _INDIHub_PHD2Server_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INDIHubServer).PHD2Server(&iNDIHubPHD2ServerServer{stream})
}

type INDIHub_PHD2ServerServer interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type iNDIHubPHD2ServerServer struct {
	grpc.ServerStream
}

func (x *iNDIHubPHD2ServerServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNDIHubPHD2ServerServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _INDIHub_SoloMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INDIHubServer).SoloMode(&iNDIHubSoloModeServer{stream})
}

type INDIHub_SoloModeServer interface {
	SendAndClose(*SoloSummary) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type iNDIHubSoloModeServer struct {
	grpc.ServerStream
}

func (x *iNDIHubSoloModeServer) SendAndClose(m *SoloSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNDIHubSoloModeServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _INDIHub_BroadcastINDIServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INDIHubServer).BroadcastINDIServer(&iNDIHubBroadcastINDIServerServer{stream})
}

type INDIHub_BroadcastINDIServerServer interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type iNDIHubBroadcastINDIServerServer struct {
	grpc.ServerStream
}

func (x *iNDIHubBroadcastINDIServerServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNDIHubBroadcastINDIServerServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _INDIHub_BroadcastPHD2Server_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(INDIHubServer).BroadcastPHD2Server(&iNDIHubBroadcastPHD2ServerServer{stream})
}

type INDIHub_BroadcastPHD2ServerServer interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type iNDIHubBroadcastPHD2ServerServer struct {
	grpc.ServerStream
}

func (x *iNDIHubBroadcastPHD2ServerServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iNDIHubBroadcastPHD2ServerServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _INDIHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "INDIHub",
	HandlerType: (*INDIHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterHost",
			Handler:    _INDIHub_RegisterHost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "INDIServer",
			Handler:       _INDIHub_INDIServer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PHD2Server",
			Handler:       _INDIHub_PHD2Server_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SoloMode",
			Handler:       _INDIHub_SoloMode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BroadcastINDIServer",
			Handler:       _INDIHub_BroadcastINDIServer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BroadcastPHD2Server",
			Handler:       _INDIHub_BroadcastPHD2Server_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "indihub.proto",
}
